<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
///Initialize our client.
var type = network_socket_tcp; //Defines a TCP Socket For Our Client (Use UDP for LAN, but I'll cover that separately as it needs different configuration)
//var ip = get_string("Which IP address do you want to connect to?",""); //Creates an IP Address to connect to. Replace with server IP Address
var ip = "127.0.0.1";
var port = 25653; //Connects to port 25653. Make sure client and server use the same port.
socket = network_create_socket(type); //Creates a Socket using the type we defined above. Use network_create_socket_ext for LAN.
connection = network_connect(socket,ip,port); //Creates a connection to our socket, server, and port.

//Send Information To The Server.
var size = 1024; //Has a size of 1024 bytes (1MB)
var type = buffer_grow; //Defines a Fixed Buffer, It does not change
var alignment = 1; //Sets the alignment to 1, commonly used for strings.  See buffer_create
buffer_in = buffer_create(size,type,alignment); //Creates our buffer.
buffer_out = buffer_create(size,type,alignment);

player = instance_create(100,100, oPlayer);
player.socket = noone;

ping_timer = 0;
ping_timer_max = 1/30;
socket_no = noone;

player.socket_no = socket;
player.str = string(socket_no) + " " + string(connection);
ds_list_add(local_players, player);

external = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

player.w = keyboard_check(ord('W'));
player.a = keyboard_check(ord('A'));
player.s = keyboard_check(ord('S'));
player.d = keyboard_check(ord('D'));

player.hp += player.heal;
if(player.hp &gt; player.hp_max){
    player.hp = player.hp_max;
}
player.heal = 0;

player.hp -= player.hit;
if(player.hp &lt;= 0){
    //instance_destroy();
    player.hp = player.hp_max;
}
player.hit = 0;

if(mouse_check_button(mb_left) &amp;&amp; player.primary_timer &gt;= player.primary_cd &amp;&amp; player.primary_timer &gt;= player.primary_ticks*player.primary_delay){
    player.primary = true;
    player.primary_timer = 0;
    player.primary_tick_no = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
ping_timer += d_time;
if(ping_timer &gt;= ping_timer_max){
    ping_timer = 0;
    
    buffer_seek(buffer_out,buffer_seek_start,0);
    buffer_write(buffer_out,buffer_u8,2);
    buffer_write(buffer_out,buffer_f32,player.x);
    buffer_write(buffer_out,buffer_f32,player.y);
    buffer_write(buffer_out,buffer_f32,player.horiz);
    buffer_write(buffer_out,buffer_f32,player.vert);
    buffer_write(buffer_out,buffer_f32,player.hp);
    network_send_packet(socket,buffer_out,buffer_tell(buffer_out));
    
    if(player.primary){
        buffer_seek(buffer_out,buffer_seek_start,0);
        buffer_write(buffer_out,buffer_u8,3);
        buffer_write(buffer_out,buffer_f32,player.primary_timer);
        buffer_write(buffer_out,buffer_f32,player.primary_ang);
        network_send_packet(socket,buffer_out,buffer_tell(buffer_out));
    }
    
    for(i=0; i&lt;instance_number(oPlayer); i++){
        unit = instance_find(oPlayer, i);
        if(unit.heal &gt; 0){
            buffer_seek(buffer_out,buffer_seek_start,0);
            buffer_write(buffer_out,buffer_u8,4);
            buffer_write(buffer_out,buffer_u16,unit.socket_no);
            buffer_write(buffer_out,buffer_f32,unit.heal);
            
            unit.heal = 0;
            
            network_send_packet(socket,buffer_out,buffer_tell(buffer_out));
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/*
///Create a click, send it to the server.
//instance_create(mouse_x,mouse_y,oClick);

//Write the click to the buffer.
buffer_seek(buffer_out,buffer_seek_start,0); //Checks the beginning of the buffer
buffer_write(buffer_out,buffer_u8,1); //Writes our ID to an unsigned positive 8-Bit integer (0-256) to our buffer. [Our buffer looks like: 1]
buffer_write(buffer_out,buffer_u16,mouse_x); //Writes our mouse_x to an unsigned positive 16-Bit integer (0-65,535) to our buffer. [Our buffer looks like: 1, mouse_x]
buffer_write(buffer_out,buffer_u16,mouse_y); //Writes our mouse_y to an unsigned positive 16-Bit integer (0-65,535) to our buffer. [Our buffer looks like: 1, mouse_x, mouse_y]

//Send the buffer to the server
//We need to tell it which socket to connect to, which buffer to use, and what buffer size we are using.
network_send_packet(socket,buffer_out,buffer_tell(buffer_out)) //Buffer_tell is going to return the size of the buffer.
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(socket == async_load[? "id"]){
    buffer_in = async_load[? "buffer"];
    buffer_seek(buffer_in,buffer_seek_start,0);
    //type_event = buffer_read(buffer_in, buffer_string);
    type_event = buffer_read(buffer_in, buffer_u8);
    switch(type_event){
        case 101:   //Test
            ux = buffer_read(buffer_in, buffer_u16);
            uy = buffer_read(buffer_in, buffer_u16);
            instance_create(ux, uy, oClick);
            break;
        case 102:   //Ally player positions
            if(socket_no != noone){
                usocket = buffer_read(buffer_in, buffer_u16);
                if(usocket != socket_no){
                    unit = noone;
                    for(i=0; i&lt;instance_number(oPlayer); i++){
                        tmp = instance_find(oPlayer, i);
                        if(tmp.socket_no == usocket){
                            external = true;
                            for(j=0; j&lt;ds_list_size(local_players); j++){
                                if(ds_list_find_value(local_players, j) == tmp){
                                    external = false;
                                    break;
                                }
                            }
                            unit = tmp;
                            break;
                        }
                    }
                    if(external){
                        if(unit == noone){
                            unit = instance_create(0,0,oPlayer);
                            unit.socket_no = usocket;
                        }
                        unit.x = buffer_read(buffer_in, buffer_f32);
                        unit.y = buffer_read(buffer_in, buffer_f32);
                        unit.hp = buffer_read(buffer_in, buffer_f32);
                        //unit.heal = 
                        buffer_read(buffer_in, buffer_f32);
                        /*
                        unit.horiz = buffer_read(buffer_in, buffer_f32);
                        unit.vert = buffer_read(buffer_in, buffer_f32);
                        unit.hp = buffer_read(buffer_in, buffer_f32);
                        //unit.heal = 
                        buffer_read(buffer_in, buffer_f32);
                        //unit.hit = 
                        buffer_read(buffer_in, buffer_f32);
                        unit.cone_timer = buffer_read(buffer_in, buffer_f32);
                        unit.cone_ang = buffer_read(buffer_in, buffer_f32);
                        */
                    }
                }
                else{
                    buffer_read(buffer_in, buffer_f32); //x
                    buffer_read(buffer_in, buffer_f32); //y
                    buffer_read(buffer_in, buffer_f32); //hp
                    player.heal += buffer_read(buffer_in, buffer_f32);
                    /*
                    buffer_read(buffer_in, buffer_f32);
                    buffer_read(buffer_in, buffer_f32);
                    buffer_read(buffer_in, buffer_f32);
                    buffer_read(buffer_in, buffer_f32);
                    buffer_read(buffer_in, buffer_f32);
                    player.heal += buffer_read(buffer_in, buffer_f32);
                    player.hit += buffer_read(buffer_in, buffer_f32);
                    */
                }
            }
            break;
        case 103:
            
            break;
        case 105:   //Enemies
            if(!instance_exists(oServer)){
                u_name = buffer_read(buffer_in, buffer_u16);
                if(instance_exists(u_name)){
                    unit = instance_find(u_name,0);
                    xx = buffer_read(buffer_in, buffer_f32);
                    yy = buffer_read(buffer_in, buffer_f32);
                    if(point_distance(x,y, xx,yy) &gt; 10){
                        unit.x = xx;
                        unit.y = yy;
                    }
                }
                else{
                    unit = instance_create(buffer_read(buffer_in, buffer_f32), buffer_read(buffer_in, buffer_f32), u_name);
                }
                unit.hp = buffer_read(buffer_in, buffer_f32);
                enemy_data_in(buffer_in, unit);
            }
            break;
        case 250:   //Set player socket info
            socket_no = buffer_read(buffer_in, buffer_u16);
            
            for(i=0; i&lt;instance_number(oPlayer); i++){
                unit = instance_find(oPlayer, i);
                if(unit.socket_no == socket_no){
                    ds_list_replace(local_players, ds_list_find_index(local_players, player), unit);
                    with(player){
                        instance_destroy();
                    }
                    player = unit;
                    break;
                }
            }
            
            player.socket_no = socket_no;
            player.str = socket_no;
            break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
///Destroys our socket and buffer to free memory
network_destroy(socket);
buffer_delete(buffer_out);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
with(player){
    if(dash_timer &gt; dash_cd &amp;&amp; mouse_check_button(mb_right)){
        tele_rect(x,y, dash_dist,10, arctan2(mouse_y-y,mouse_x-x), 4, 0);
    }
    if(dash_timer &gt; dash_cd &amp;&amp; mouse_check_button_released(mb_right)){
        dash_timer = 0;
        dist = 0;
        ang = arctan2(mouse_y-y,mouse_x-x);
        while(dist &lt; dash_dist &amp;&amp; !place_meeting(x+cos(ang)*dist, y+sin(ang)*dist, oWall)){
            dist += radius;
        }
        if(dist &lt; dash_dist){
            dist--;
            while(place_meeting(x+cos(ang)*dist,y+sin(ang)*dist,oWall)){
                dist--;
            }
        }
        dist--;
        
        ds_list_add(buffs, "dash");
        ds_list_add(buffs, dash_dur);
        ds_list_add(buffs, 0);
        ds_list_add(buffs, x);
        ds_list_add(buffs, y);
        ds_list_add(buffs, x+cos(ang)*dist);
        ds_list_add(buffs, y+sin(ang)*dist);
        vert = 0;
        horiz = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
with(player){
    if(class == 0){
        class = 1;
        sprite_index = sStalker;
    }
    else if(class == 1){
        class = 0;
        sprite_index = sPlayer;
    }
    class_sheet(class);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
