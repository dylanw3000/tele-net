<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>oAlly</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
event_inherited();

w = 0;
a = 0;
s = 0;
d = 0;

str = "";
local_unit = false;

class = 0;  //0 = heal, 1 = stalker

max_speed = 120;
acc = 800;

//hp_max = 800;
//hp = hp_max;

dash = false;
dash_cd = 1;
dash_timer = dash_cd;
dash_dist = 200;
dash_dur = .3;

primary = false;
primary_timer = 2;
primary_ang = 0;
class_sheet(class);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
y_mod = s-w;
x_mod = d-a;

buff_pointer = 0;
buff_failsafe = -1;
buff_failsafe2 = ds_list_size(buffs);
while(buff_pointer &lt; ds_list_size(buffs)){
    if(buff_failsafe == buff_pointer &amp;&amp; buff_failsafe2 == ds_list_size(buffs)){
        break;
    }
    buff_failsafe = buff_pointer;
    buff_failsafe2 = ds_list_size(buffs);
    buff_table(buff_pointer);
}

if(x_mod != 0 &amp;&amp; y_mod != 0){
    x_mod = .7 * x_mod;
    y_mod = .7 * y_mod;
}

//slow = false;
/*for(i=0; i&lt;ds_list_size(buffs); i++){
    a = ds_list_find_value(buffs, i);
    buff_list(a);
}*/

/**** Vert ****/
vert += acc*y_mod * d_time;

v_final = vert*d_time + env_v*d_time;

if(place_meeting(x, y+v_final, oWall)){
    while(!place_meeting(x, y+sign(v_final), oWall)){
        y += sign(v_final);
    }
    vert = 0-env_v;
    v_final = 0;
}


/**** Horiz ****/
horiz += acc*x_mod * d_time;

h_final = horiz*d_time + env_h*d_time;

if(place_meeting(x+h_final, y, oWall)){
    while(!place_meeting(x+sign(h_final), y, oWall)){
        x += sign(h_final);
    }
    horiz = 0-env_h;
    h_final = 0;
}


/**** Slowing ****/
vel = sqrt(vert*vert + horiz*horiz);
ang = arctan2(vert,horiz);

excess = vel/max_speed;
if(excess &gt; 1){
    //vert /= excess;
    //horiz /= excess;
    if(vel - acc*excess_slow*d_time &lt; max_speed){
        vert /= excess;
        horiz /= excess;
    }
    else{
        vert -= sin(ang)*acc*excess_slow*d_time;
        horiz -= cos(ang)*acc*excess_slow*d_time;
    }
}

if(x_mod == 0){
    if(abs(horiz) - abs(cos(ang) * acc * slow * d_time) &lt; 0){
        horiz = 0;
    }
    else{
        horiz -= cos(ang) * acc * slow * d_time;
    }
}
if(y_mod == 0){
    if(abs(vert) - abs(sin(ang) * acc * slow * d_time) &lt; 0){
        vert = 0;
    }
    else{
        vert -= sin(ang) * acc * slow * d_time;
    }
}

/*** ***/
//x += horiz * d_time;
//y += vert * d_time;

if(slow_timer &gt; 0){
    h_final *= slow_str;
    v_final *= slow_str;
    slow_timer -= d_time;
}

x += h_final;
y += v_final;

env_h = 0;
env_v = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
primary_timer += d_time;

//shot_ang = arctan2(mouse_y-y,mouse_x-x);

if(primary){
    
    if(class == 0 || class == 1){
        tele_circ(x+cos(primary_ang)*primary_disp,y+sin(primary_ang)*primary_disp, primary_in,primary_out, primary_ang-primary_wid,primary_ang+primary_wid, primary_color, primary_timer*primary_out/(primary_ticks*primary_delay));
        if(primary_timer-primary_tick_no*primary_delay &gt; primary_delay){
            primary_tick_no++;
            
            if(local_unit){
                if(class == 0){
                    heal += primary_heal;
                    for(i=0; i&lt;instance_number(oAlly); i++){
                        unit = instance_find(oAlly,i);
                        if(unit != id){
                            collide_circ(x+cos(primary_ang)*primary_disp,y+sin(primary_ang)*primary_disp, primary_in,primary_out, primary_ang-primary_wid,primary_ang+primary_wid, -primary_heal, unit);
                        }
                    }
                }
                else if(class == 1){
                    for(i=0; i&lt;instance_number(oEnemy); i++){
                        unit = instance_find(oEnemy,i);
                        collide_circ(x,y, primary_in,primary_out, primary_ang-primary_wid,primary_ang+primary_wid, primary_dam, unit);
                    }
                }
            }
            if(primary_timer &gt; primary_ticks*primary_delay){
                primary = false;
                primary_tick_no = 0;
            }
        }
    }
}

/*
if(primary){
    primary_ang = arctan2(mouse_y-y,mouse_x-x);
    tele_circ(x,y, primary_in,primary_out, primary_ang-primary_wid,primary_ang+primary_wid, 3, primary_timer*primary_out/(primary_ticks*primary_delay));
    //draw_rectangle(x-50,y-50,x+50,y+50,0);
    if(primary_timer-primary_tick_no*primary_delay &gt; primary_delay){
        primary_tick_no++;
        for(i=0; i&lt;instance_number(oEnemy); i++){
            unit = instance_find(oEnemy,i);
            collide_circ(x,y, primary_in,primary_out, primary_ang-primary_wid,primary_ang+primary_wid, primary_dam, unit);
        }
        if(primary_timer &gt; primary_ticks*primary_delay){
            primary = false;
        }
    }
}

/*
stab_timer += d_time;
if(stab_timer &gt;= stab_cd &amp;&amp; !stab &amp;&amp; mouse_check_button(mb_right)){
    //stab = true;
    stab_timer = 0;
    stab_tick_no = 0;
}

if(stab){
    stab_ang = arctan2(mouse_y-y,mouse_x-x);
    tele_circ(x,y, stab_in,stab_out, stab_ang-stab_wid,stab_ang+stab_wid, 3, stab_timer*stab_out/(stab_ticks*stab_delay));
    //draw_rectangle(x-50,y-50,x+50,y+50,0);
    if(stab_timer-stab_tick_no*stab_delay &gt; stab_delay){
        stab_tick_no++;
        for(i=0; i&lt;instance_number(oEnemy); i++){
            unit = instance_find(oEnemy,i);
            collide_circ(x,y, stab_in,stab_out, stab_ang-stab_wid,stab_ang+stab_wid, stab_dam, unit);
        }
        if(stab_timer &gt; stab_ticks*stab_delay){
            stab = false;
        }
    }
}
*/

if(hit == 0){
    color = $ffffff;
}
else if(hit &gt; 0){
    color = $ffff33;
}
//other damage stuff went here

dash_timer += d_time;
/*
if(dash_timer &gt; dash_cd &amp;&amp; mouse_check_button(mb_right)){
    tele_rect(x,y, dash_dist,10, arctan2(mouse_y-y,mouse_x-x), 4, 0);
}
if(dash_timer &gt; dash_cd &amp;&amp; mouse_check_button_released(mb_right)){
    dash_timer = 0;
    dist = 0;
    ang = arctan2(mouse_y-y,mouse_x-x);
    while(dist &lt; dash_dist &amp;&amp; !place_meeting(x+cos(ang)*dist, y+sin(ang)*dist, oWall)){
        dist += radius;
    }
    if(dist &lt; dash_dist){
        dist--;
        while(place_meeting(x+cos(ang)*dist,y+sin(ang)*dist,oWall)){
            dist--;
        }
    }
    dist--;
    
    ds_list_add(buffs, "dash");
    ds_list_add(buffs, dash_dur);
    ds_list_add(buffs, 0);
    ds_list_add(buffs, x);
    ds_list_add(buffs, y);
    ds_list_add(buffs, x+cos(ang)*dist);
    ds_list_add(buffs, y+sin(ang)*dist);
    vert = 0;
    horiz = 0;
}
*/

draw_set_colour($444444);
draw_rectangle(x-hp_bar_w/2,y+hp_bar_h-hp_bar_l, x+hp_bar_w/2,y+hp_bar_h, 0);

draw_set_colour($33ff66);
draw_rectangle(x-hp_bar_w/2,y+hp_bar_h-hp_bar_l, x-hp_bar_w/2+hp_bar_w*hp/hp_max,y+hp_bar_h, 0);

draw_sprite_ext(sprite_index,image_index, x,y, 1,1, 0, color, 1);

if(debug){
    draw_set_colour($ffffff);
    draw_circle(x-.5,y-.5,radius,0);
    draw_set_colour($000000);
    draw_text(x,y, string(primary) + "#" + string(primary_ang) + "#" + string(primary_timer) + "#" + string(primary_delay) + "#" + string(primary_tick_no));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
