<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
///Initialize our Server.
var type = network_socket_tcp; //Creates a TCP Socket. The server can use network_socket_tcp, network_socket_udp, or network_socket_bluetooth.
//network_socket_tcp is more reliable and stable. TCP checks for errors in the packets. TCP is a connection based protocol.
//network_socket_udp is faster than tcp, but has a probability of dropping packets. UDP is a broadcast based protocol.
//network_socket_bluetooth is currently not supported natively but I it's stable and fast for a broadcast based protocol.
var port = 25653; //Will run the server on port 25653.
max_clients = 8; //Sets our max clients to 8.
server = network_create_server(type,port,max_clients); //Creates our server on the network and returns an id of server.
//socket = noone; //Creates a null socket, since we don't have a socket yet.
client_sockets = ds_list_create();

var size = 1024; //Has a size of 1024 bytes (1MB)
var type = buffer_grow; //Defines a Fixed Buffer, It does not change
var alignment = 1; //Sets the alignment to 1, commonly used for strings.  See buffer_create
//buffer_in = buffer_create(size,type,alignment); //Creates our buffer.
buffer_out = buffer_create(size,type,alignment);

//client_x = ds_list_create();
//client_y = ds_list_create();
client_units = ds_map_create();


ping_timer = 0;
ping_timer_max = 1/30;

player = instance_create(100,100,oPlayer);
player.socket_no = 1337;
ds_list_add(local_players, player);

str = "";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
player.w = keyboard_check(ord('W'));
player.a = keyboard_check(ord('A'));
player.s = keyboard_check(ord('S'));
player.d = keyboard_check(ord('D'));

for(i=0; i&lt;instance_number(oEnemy); i++){    //Enemy Movement
    unit = instance_find(oEnemy,i);
    //str = unit.object_index;
    unit.server_actions = true;
}

player.hp += player.heal;
if(player.hp &gt; player.hp_max){
    player.hp = player.hp_max;
}
player.heal = 0;

player.hp -= player.hit;
if(player.hp &lt;= 0){
    //instance_destroy();
    player.hp = player.hp_max;
}
player.hit = 0;

if(mouse_check_button(mb_left) &amp;&amp; player.primary_timer &gt;= player.primary_cd &amp;&amp; player.primary_timer &gt;= player.primary_ticks*player.primary_delay){
    player.primary = true;
    player.primary_timer = 0;
    player.primary_tick_no = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
ping_timer += d_time;
if(ping_timer &gt;= ping_timer_max){
    ping_timer = 0;
    
    for(j=0; j&lt;ds_list_size(client_sockets); j++){      //Unit Info
        sock = ds_list_find_value(client_sockets,j);
    
        buffer_seek(buffer_out, buffer_seek_start, 0);
        buffer_write(buffer_out, buffer_u8, 102);
        buffer_write(buffer_out, buffer_u16, sock);
        unit = client_units[? sock];
        buffer_write(buffer_out, buffer_f32, unit.x);
        buffer_write(buffer_out, buffer_f32, unit.y);
        buffer_write(buffer_out, buffer_f32, unit.hp);
        buffer_write(buffer_out, buffer_f32, unit.heal);
        /*
        buffer_write(buffer_out, buffer_f32, unit.horiz);
        buffer_write(buffer_out, buffer_f32, unit.vert);
        buffer_write(buffer_out, buffer_f32, unit.hp);
        buffer_write(buffer_out, buffer_f32, unit.heal);
        buffer_write(buffer_out, buffer_f32, unit.hit);
        buffer_write(buffer_out, buffer_f32, unit.cone_timer);
        buffer_write(buffer_out, buffer_f32, unit.cone_ang);
        */
        
        external = true;
        for(pno=0; pno&lt;ds_list_size(local_players); pno++){
            if(ds_list_find_value(local_players, pno) == unit){
                external = false;
                break;
            }
        }
        if(external){
            unit.heal = 0;
            unit.hit = 0;
        }
        
        for(i=0; i&lt;ds_list_size(client_sockets); i++){
            network_send_packet(ds_list_find_value(client_sockets,i),buffer_out,buffer_tell(buffer_out));
        }
    }
    
    buffer_seek(buffer_out, buffer_seek_start, 0);      //Unit Info Self
    buffer_write(buffer_out, buffer_u8, 102);
    buffer_write(buffer_out, buffer_u16, 1337);
    //unit = client_units[? sock];
    buffer_write(buffer_out, buffer_f32, player.x);
    buffer_write(buffer_out, buffer_f32, player.y);
    buffer_write(buffer_out, buffer_f32, player.hp);
    buffer_write(buffer_out, buffer_f32, player.heal);
    /*
    buffer_write(buffer_out, buffer_f32, player.horiz);
    buffer_write(buffer_out, buffer_f32, player.vert);
    buffer_write(buffer_out, buffer_f32, player.hp);
    buffer_write(buffer_out, buffer_f32, player.heal);
    buffer_write(buffer_out, buffer_f32, player.hit);
    buffer_write(buffer_out, buffer_f32, player.cone_timer);
    buffer_write(buffer_out, buffer_f32, player.cone_ang);
    */
    
    for(i=0; i&lt;ds_list_size(client_sockets); i++){
        network_send_packet(ds_list_find_value(client_sockets,i),buffer_out,buffer_tell(buffer_out));
    }
    
    for(j=0; j&lt;instance_number(oEnemy); j++){       //Enemy Info
        unit = instance_find(oEnemy,j);
        
        buffer_seek(buffer_out, buffer_seek_start, 0);
        buffer_write(buffer_out, buffer_u8, 105);
        buffer_write(buffer_out, buffer_u16, unit.object_index);
        buffer_write(buffer_out, buffer_f32, unit.x);
        buffer_write(buffer_out, buffer_f32, unit.y);
        buffer_write(buffer_out, buffer_f32, unit.hp);
        enemy_data_out(buffer_out, unit);
        
        for(i=0; i&lt;ds_list_size(client_sockets); i++){
            network_send_packet(ds_list_find_value(client_sockets,i),buffer_out,buffer_tell(buffer_out));
        }
        //instance_create(unit.x,unit.y, unit.object_index);
        //break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
///Check for clients and data.
var type_event = async_load[? "type"]; //Grabbing the type from async_load using an accessor, then store that value in type_event
switch (type_event){
    case network_type_connect: //If our type_event is equal to network_type_connect. If someone tries to connect.
        //Add the client to the socket variable - When using multiple clients, use a data structure. This is a single client.
        //if (socket == noone){ //If No one is connected yet.
        //    socket = async_load[? "socket"]; //Returns the socket from async_load using an accessor. Then store it in the socket.
        //}
        ds_list_add(client_sockets, async_load[? "socket"]);
        //str = async_load[? "socket"];
        //ds_list_add(client_x, 50);
        //ds_list_add(client_y, 50);
        
        /*
        unit = instance_create(50,50,oPlayer2);
        ds_map_add(client_units, async_load[? "socket"], unit);
        unit.socket_no = async_load[? "socket"];
        */
        
        unit = instance_create(100,100,oPlayer);
        ds_map_add(client_units, async_load[? "socket"], unit);
        unit.socket_no = async_load[? "socket"];
        
        buffer_seek(buffer_out, buffer_seek_start, 0);
        buffer_write(buffer_out, buffer_u8, 250);
        buffer_write(buffer_out, buffer_u16, async_load[? "socket"]);
        network_send_packet(async_load[? "socket"],buffer_out,buffer_tell(buffer_out));
        
        break; //Break out of the switch event.
       
    case network_type_disconnect: //If someone tries to disconnect.
        //Remove the client from the socket variable
        socket = noone
        break;
       
    case network_type_data: //If we are receiving data
        //Handle the data.
        var buffer_in = async_load[? "buffer"]; //Create a temporary buffer.
        buffer_seek(buffer_in,buffer_seek_start,0); //Looks at the beginning of the buffer.
        scr_received_packet(buffer_in); //Executes our script scr_recieved_packet, and pass the buffer to our script.
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
///Terminates our server to free memory.
network_destroy(server); //Destroys the server that we made in the create event. This will delete the server from the memory at the end of the game

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
with(player){
    if(dash_timer &gt; dash_cd &amp;&amp; mouse_check_button(mb_right)){
        tele_rect(x,y, dash_dist,10, arctan2(mouse_y-y,mouse_x-x), 4, 0);
    }
    if(dash_timer &gt; dash_cd &amp;&amp; mouse_check_button_released(mb_right)){
        dash_timer = 0;
        dist = 0;
        ang = arctan2(mouse_y-y,mouse_x-x);
        while(dist &lt; dash_dist &amp;&amp; !place_meeting(x+cos(ang)*dist, y+sin(ang)*dist, oWall)){
            dist += radius;
        }
        if(dist &lt; dash_dist){
            dist--;
            while(place_meeting(x+cos(ang)*dist,y+sin(ang)*dist,oWall)){
                dist--;
            }
        }
        dist--;
        
        ds_list_add(buffs, "dash");
        ds_list_add(buffs, dash_dur);
        ds_list_add(buffs, 0);
        ds_list_add(buffs, x);
        ds_list_add(buffs, y);
        ds_list_add(buffs, x+cos(ang)*dist);
        ds_list_add(buffs, y+sin(ang)*dist);
        vert = 0;
        horiz = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_self();
draw_text(x,y, ds_list_size(client_sockets));
draw_text(x,y+20, str);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
with(player){
    if(class == 0){
        class = 1;
        sprite_index = sStalker;
    }
    else if(class == 1){
        class = 0;
        sprite_index = sPlayer;
    }
    class_sheet(class);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="71">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//instance_create(512,384, oSpin);
//instance_create(512,384, oFrost);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>oKiralak</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>512</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>384</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
