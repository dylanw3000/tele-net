<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
server_actions = false;

bliz_init_time = 2;
bliz_timer = bliz_init_time-2;
bliz_delay = 1;
bliz_dur = 8;

gen_x = 512;
gen_y = 384;

bliz_ang = pi/4;
bliz_ang_w = pi/4;
bliz_ang_mod = .6;
bliz_l = 500;
bliz_in = 80;

bliz_dam_time = .1;
bliz_dam_timer = 0;
bliz_damage = 100;

aa_range = 60;
aa_damage = 40;
aa_cd = 1;
aa_delay = 1;

move_speed = 200;
move_delay = .25;
move_timer = 0;

vert = 0;
horiz = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(server_actions){
    move_timer += d_time;
    if(move_timer &gt;= move_delay){
        move_timer -= move_delay;
        dist = 9999;
        target = noone;
        for(i=0; i&lt;instance_number(oAlly); i++){
            unit = instance_find(oAlly,i);
            d1 = point_distance(x,y, unit.x,unit.y)
            if(d1 &lt; dist){
                dist = d1;
                target = unit;
            }
        }
        
        if(dist &lt;= aa_range){
            vert = 0;
            horiz = 0;
            target.hit += aa_damage;
        }
        else{
            move_x = target.x;
            move_y = target.y;
            
            ang = arctan2(move_y-y,move_x-x);
            vert = sin(ang)*move_speed;
            horiz = cos(ang)*move_speed;
        }
    }
}
   
x += horiz*d_time;
y += vert*d_time;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
bliz_timer += d_time;
if(bliz_timer &gt;= bliz_init_time){
    if(bliz_timer-bliz_init_time &lt; bliz_delay){
        fill = (bliz_in+bliz_l)-(bliz_in+bliz_l)*(bliz_timer-bliz_init_time)/bliz_delay
        tele_circ(gen_x,gen_y, 0,bliz_in, -pi,pi, 0, fill);
        tele_circ(gen_x,gen_y, bliz_in,bliz_in+bliz_l, bliz_ang+bliz_ang_w,bliz_ang+2*pi-bliz_ang_w, 0, fill);
    }
    else{
        bliz_ang += bliz_ang_mod*d_time;
        
        fill = (bliz_in+bliz_l)*(bliz_timer-bliz_init_time-bliz_delay)/bliz_dur;
        tele_circ(gen_x,gen_y, 0,bliz_in, -pi,pi, 0, fill);
        tele_circ(gen_x,gen_y, bliz_in,bliz_in+bliz_l, bliz_ang+bliz_ang_w,bliz_ang+2*pi-bliz_ang_w, 0, fill);
        
        bliz_dam_timer += d_time;
        if(bliz_dam_timer &gt;= bliz_dam_time){
            bliz_dam_timer -= bliz_dam_time;
            //collide_circ(x,y, 0,in, -pi,pi, damage, instance_find(oPlayer, 0));
            //collide_circ(x,y, in,l, ang-ang_w,ang+ang_w, damage, instance_find(oPlayer, 0));
            //collide_circ(x,y, in,l, ang+pi-ang_w,ang+pi+ang_w, damage, instance_find(oPlayer, 0));
        }
        
        if(bliz_timer &gt;= bliz_dur+bliz_delay+bliz_init_time){
            bliz_timer = 0;
        }
    }
}


draw_self();
//draw_text(x,y,bliz_timer);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
